[
    {
        "type": "title",
        "terminal": "presentation.zsh",
        "prompt": "presentation --title",
        "title": "Designing least-privilege IAM policies at scale",
        "author": "David Cohan",
        "version": "1.0.0",
        "help": "<h1>Introduction</h1><p>Let me start by introducing myself and what was my role along the way in the implementation of <strong>least-privilege IAM policies</strong> at scale.</p><p>This project relates to my previous work at a <em>large beauty company</em>. When I joined, the company was already up and running. The company grew fast and faced several challenges:</p><ul><li>Engineering team grew fast and introduced different seniority levels</li><li>Compliance requirements - we already were PCI compliant, but we handled some of the requirements in a simple way</li><li>Need to ensure minimal permissions were set</li></ul><p>During this presentation I will guide you through some of the steps taken to improve this and minimize any escalation.</p>",
        "bullets": [
            "Scalable IAM policy design patterns",
            "Automated <span class=\"highlight\">least-privilege</span> enforcement",
            "Enterprise security at <span class=\"secondary-highlight\">scale</span>"
        ],
        "status": {
            "left": [
                { "icon": "‚ö°", "text": "powerlevel10k" },
                { "icon": "üìÅ", "text": "~/iam-policies" },
                { "icon": "üåø", "text": "main" }
            ],
            "right": "Ready"
        }
    },
    {
        "type": "introduction",
        "terminal": "iam.zsh",
        "prompt": "iam --scale --enterprise",
        "title": "The Starting Point",
        "subtitle": "What We Inherited",
        "help": "<h1>Problem</h1><p>Teams were growing and there were multiple legacy IAM users and roles, there was no standard, no real idea of who owned which principal. With multiple AWS accounts made it difficult to trace issues and excess of permissions. There were multiple users with access to PCI and little control of active users. There was some automation in place with some CloudFormation and Terraform, but many accounts were left heterogeneous.</p>",
        "bullets": [
            "100+ Engineers across 10-12 teams with broad permissions",
            "50+ AWS accounts some on same AWS Organization while others dont with heterogeneous patterns",
            "Admin-level access everywhere for operational speed",
            "No audit trail, shared credentials",
            "PCI DSS compliance with some mocked up data"
        ],
        "code": {
            "lang": "bash",
            "content": "# The chaos we started with\naws iam list-users --max-items 100\n# Result: Hundreds of overprivileged accounts\necho \"Security debt: CRITICAL\""
        },
        "status": {
            "left": [
                { "icon": "‚ö†Ô∏è", "text": "100+ engineers" },
                { "icon": "üî•", "text": "security debt" },
                { "icon": "üìã", "text": "PCI requirements" }
            ],
            "right": "Problem"
        }
    },
    {
        "type": "foundation",
        "terminal": "organizations.zsh",
        "prompt": "aws organizations --setup",
        "title": "AWS Organizations Foundation",
        "subtitle": "Centralized Governance",
        "help": "<h2>Top to Bottom, organize organization</h2><ul><li>A centralized Terraform code in charge of setup base roles and policies and so other shared resources</li><li>All roles to be assumed were created here, all the same shape</li><li>Created IAM roles for 3rd party services using external ids whenever it was possible</li><li>A new requirement on a policy was relatively easy to share across accounts</li><li>Roles had a trusting over an SSO provider we had (Okta was the last one, can't remember what was the original when I joined)</li><li>Roles inter-account for shared services were also created here (like Puppet IAM Roles)</li><li>Configured CloudTrail at billing account (can't remember how it was done but was part of the landing on each account)</li><li>Re-landed all of our accounts including production</li><li>Dried out old IAM users and roles (shared ones)</li></ul>",
        "image": "images/iam_orgs.png",
        "bullets": [
            "Master account with AWS Organizations organized by OU",
            "Accounts structure and responsibility: shared services + business unit accounts",
            "CloudTrail enabled across all accounts",
            "Terraform-managed provisioning and landing setup"
        ],
        "code": {
            "lang": "hcl",
            "content": "resource \"aws_organizations_organization\" \"main\" {\n  aws_service_access_principals = [\n    \"cloudtrail.amazonaws.com\",\n    \"config.amazonaws.com\"\n  ]\n  feature_set = \"ALL\"\n}"
        },
        "status": {
            "left": [
                { "icon": "üèóÔ∏è", "text": "foundation" },
                { "icon": "üìä", "text": "centralized" },
                { "icon": "üîß", "text": "terraform" }
            ],
            "right": "Built"
        }
    },
    {
        "type": "guardrails",
        "terminal": "scp.zsh",
        "prompt": "aws organizations --scp",
        "title": "Service Control Policies",
        "subtitle": "Organization-Level Guardrails",
        "help": "<h2>Enabling SCP at a glance</h2><ul><li>We could easily create restrictions such as which regions we wanted to enable/disable</li><li>What services were enabled/disabled</li><li>Prevent destruction of unwanted resources such as databases, caches, etc</li><li>While on the other hand we found pretty hard trial and error to scope down what permiss",
        "bullets": [
            "Preventive controls blocking dangerous actions",
            "Environment-specific restrictions",
            "Production protections (no resource deletion)",
            "<span class=\"highlight\">Results</span>: Blocked unwanted regions/services, prevented accidents"
        ],
        "code": {
            "lang": "json",
            "content": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Deny\",\n    \"Action\": [\"ec2:TerminateInstances\"],\n    \"Resource\": \"*\",\n    \"Condition\": {\n      \"StringNotEquals\": {\n        \"aws:PrincipalTag/Environment\": \"Production\"\n      }\n    }\n  }]\n}"
        },
        "image": "images/iam_evaluation.png",
        "status": {
            "left": [
                { "icon": "üõ°Ô∏è", "text": "preventive" },
                { "icon": "üö´", "text": "restrictions" },
                { "icon": "‚úÖ", "text": "effective" }
            ],
            "right": "Protected"
        }
    },
    {
        "type": "boundaries",
        "terminal": "boundaries.zsh",
        "prompt": "iam --permission-boundaries",
        "title": "Permission Boundaries",
        "subtitle": "Safety Net Implementation",
        "help": "<h2>Setting up a second guardrails for escalations</h2><p>Implementing an extensive permission boundary allowed us to let developers work more independently, but always within secure guardrails avoiding unwanted escalations.</p>",
        "bullets": [
            "Maximum permission limits regardless of policies",
            "Developer self-service within guardrails",
            "Standard boundary: allow EC2/S3/Lambda, deny IAM/Orgs"
        ],
        "code": {
            "lang": "json",
            "content": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Action\": [\"ec2:*\", \"s3:*\", \"lambda:*\"],\n    \"Resource\": \"*\"\n  }, {\n    \"Effect\": \"Deny\", \n    \"Action\": [\"iam:*\", \"organizations:*\"],\n    \"Resource\": \"*\"\n  }]\n}"
        },
        "status": {
            "left": [
                { "icon": "üõ°Ô∏è", "text": "boundaries" },
                { "icon": "üîí", "text": "secure" },
                { "icon": "‚ú®", "text": "zero incidents" }
            ],
            "right": "Secured"
        }
    },
    {
        "type": "compliance",
        "terminal": "iam-users.zsh",
        "prompt": "iam --pci-compliance",
        "title": "IAM Users - PCI Reality",
        "subtitle": "Compliance Requirements",
        "help": "<h2>Meet PCI DSS requirements</h2><ul><li>We enabled 90 day key rotation with IAM users provided by Terraform</li><li>No shared accounts</li><li>MFA was mandatory</li><li>We found some issues trying to use MFA with the 2nd factor auth, we came up with a combination of permissions in which we allowed actions to validate MFA codes without 2FA and ensure all other actions were protected (don't recall the details)</li><li>All in all, it was decent controls since a small portion of the whole engineering team was allowed to enter PCI accounts, but manually provided</li></ul>",
        "bullets": [
            "Individual named accounts (firstname.lastname)",
            "MFA enforcement + 90-day key rotation",
            "<span class=\"secondary-highlight\">Trade-off</span>: Complex credential management vs. compliance"
        ],
        "code": {
            "lang": "bash",
            "content": "# PCI DSS compliant user creation\naws iam create-user --user-name john.doe\naws iam attach-user-policy --user-name john.doe \\n  --policy-arn arn:aws:iam::aws:policy/IAMUserChangePassword\necho \"MFA required for all access\""
        },
        "status": {
            "left": [
                { "icon": "üë§", "text": "individual" },
                { "icon": "üîê", "text": "MFA enforced" },
                { "icon": "üìã", "text": "PCI compliant" }
            ],
            "right": "Compliant"
        }
    },
    {
        "type": "infrastructure",
        "terminal": "terraform.zsh",
        "prompt": "terraform --iam-scale",
        "title": "Terraform at Scale",
        "subtitle": "Infrastructure as Code",
        "help": "<h2>Terraform as starting point</h2><ul><li>Terraform was the methodology we spread to engineering to create resources</li><li>Modules were created to define common trustings for different kind of services</li><li>Permissions boundary was mandatory in order to allow roles creation</li><li>We created some predefined roles for common services</li><li>It was decently managed, but it was hard to keep up with the least privilege principle, it was partially successful after all</li><li>Terraform was manually applied by senior engineers on each pod</li></ul>",
        "bullets": [
            "Standardized role modules (EC2, Lambda, EKS)",
            "Automatic permission boundary application",
            "Version-controlled IAM with review process",
            "Consistent trust relationships"
        ],
        "code": {
            "lang": "hcl",
            "content": "module \"application_role\" {\n  source = \"./modules/iam-application-role\"\n  \n  role_name = \"${var.app_name}-${var.environment}-role\"\n  trusted_services = [\"ec2.amazonaws.com\"]\n  permission_boundary_arn = data.aws_iam_policy.boundary.arn\n}"
        },
        "status": {
            "left": [
                { "icon": "üèóÔ∏è", "text": "standardized" },
                { "icon": "üîÑ", "text": "automated" },
                { "icon": "üìù", "text": "version controlled" }
            ],
            "right": "Scaled"
        }
    },
    {
        "type": "results",
        "terminal": "metrics.zsh",
        "prompt": "iam --measure-success",
        "title": "Results Achieved",
        "subtitle": "Measurable Impact",
        "help": "<h2>Results</h2><ul><li>Yes we speeded up and standardized access through accounts, that worked pretty well but there were big gaps during this implementation</li><li>We didn't rely on applications to monitor and automatic detection of threats</li><li>All audit activities were manual and unsuccessful</li><li>Using an IdP we could fully control the lifecycle of services accepting the trade off between strict least privilege principle and standardization and automation across the board</li></ul>",
        "bullets": [
            "100% reduction in shared roles sprawl (shared, 3rd party, etc)",
            "100% centralized audit compliance",
            "30% more self-service conciousness through training",
            "30% faster incident investigation with IAM (applications incidents, not security incidents)"
        ],
        "code": {
            "lang": "bash",
            "content": "# Success metrics\necho \"Excessive permissions: -70%\"\necho \"Audit compliance: 100%\"\necho \"Access requests: -80%\"\necho \"Incident response: +50% faster\"\necho \"Status: MISSION ACCOMPLISHED\""
        },
        "status": {
            "left": [
                { "icon": "üìà", "text": "improved" },
                { "icon": "‚úÖ", "text": "compliant" },
                { "icon": "üéØ", "text": "success" }
            ],
            "right": "Success"
        }
    },
    {
        "type": "future",
        "terminal": "vision.zsh",
        "prompt": "iam --future-state",
        "title": "What We'd Do Better",
        "subtitle": "Future Vision",
        "help": "<h2>Conclusion</h2><ul><li>As I ended up architecting projects for the team, one of the most valuable learnings was that the learning curve and the cognitive load for developers to learn basic infrastructure, learn AWS, learn Terraform was just too much, most of the team members didn't learn properly</li><li>There was lots of copy-paste antipattern</li><li>There was lots of requests and doubts on how to use Terraform and AWS</li><li>Restrictions were properly applied, but self service was a failure</li></ul>",
        "bullets": [
            "<span class=\"secondary-highlight\">Missed</span>: AWS SSO instead of IAM Users (better traceability)",
            "<span class=\"secondary-highlight\">Missed</span>: Automated Terraform pipelines vs. manual",
            "<span class=\"secondary-highlight\">Missed</span>: Remove developer write access entirely",
            "<span class=\"highlight\">Future</span>: Application-centric identity platform with automated lifecycle"
        ],
        "code": {
            "lang": "bash",
            "content": "# Future state architecture\necho \"Application requests role\"\necho \"Platform auto-creates with minimal permissions\" \necho \"Just-in-time access granted\"\necho \"Automatic expiration enforced\"\necho \"Zero console access needed\""
        },
        "status": {
            "left": [
                { "icon": "üîÆ", "text": "vision" },
                { "icon": "ü§ñ", "text": "automated" },
                { "icon": "üöÄ", "text": "next-gen" }
            ],
            "right": "Future"
        }
    },
    {
        "type": "conclusion",
        "terminal": "conclusion.zsh",
        "prompt": "presentation --summary",
        "title": "Thank You!",
        "bullets": [
            "Questions & Discussion",
            "Contact: <span class=\"highlight\">cohandv@gmail.com</span>",
            "GitHub: <span class=\"secondary-highlight\">@cohandv</span>"
        ],
        "code": {
            "lang": "bash",
            "content": "# Let's connect and collaborate\ngit clone https://github.com/cohandv/iam-deck-101\ncd iam-deck-101 && npm install\nnpm start # Let's build something awesome!"
        },
        "status": {
            "left": [
                { "icon": "‚ö°", "text": "powerlevel10k" },
                { "icon": "‚ú®", "text": "complete" },
                { "icon": "üéØ", "text": "success" }
            ],
            "right": "Complete"
        }
    }
]
